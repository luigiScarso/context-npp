#ifndef ConTeXt_LEXER_H_
#define ConTeXt_LEXER_H_
#define MAX_MENU_SCRIPTS 50

#include "Scintilla.h"
#include "ILexer.h"
#include "WordList.h"
#include "LexAccessor.h"
#include "Accessor.h"
#include "LexerModule.h"
#include "StyleContext.h"
#include "CharacterSet.h"

namespace ConTeXt {

/// ConTeXt script lexing and folding.
class ConTeXt final :
	public ILexer
{
public:
	ConTeXt() {}
	virtual ~ConTeXt() {}

	static ILexer* LexerFactory();

	inline bool isOperator(const char ch);
	inline bool isDigit(const char ch);
	int ParseTeXCommand(unsigned int pos, Accessor &styler, char *command);
	int classifyFoldPointTeXPaired(const char* s);
	int classifyFoldPointTeXUnpaired(const char* s);
	bool IsTeXCommentLine(int line, Accessor &styler);

	// ILexer
	void SCI_METHOD Release() override;
	int SCI_METHOD Version() const override;
	const char* SCI_METHOD PropertyNames() override;
	int SCI_METHOD PropertyType(const char* name) override;
	const char* SCI_METHOD DescribeProperty(const char* name) override;
	int SCI_METHOD PropertySet(const char* key, const char* val) override;
	const char* SCI_METHOD DescribeWordListSets() override;
	int SCI_METHOD WordListSet(int n, const char* wl) override;
	void SCI_METHOD Lex(unsigned int startPos, int length, int initStyle, IDocument* pAccess) override;
	void SCI_METHOD Fold(unsigned int startPos, int length, int initStyle, IDocument* pAccess) override;
	void* SCI_METHOD PrivateCall(int operation, void* pointer) override;	

private:
	enum TextState
	{
		TS_DEFAULT,
		TS_COMMENT,
		TS_KEYWORD,
		TS_VALUE_OPERATOR, //TS_EM_EN_DASH_OPERATOR,
		TS_VALUE_NUMBER,
		TS_LINEEND,
		TS_ARABIC_INDIC_NUMBERS, 
		TS_EXTENDED_ARABIC_INDIC_NUMBERS,
		TS_PUNCTUATION_001, 
		TS_PUNCTUATION_002
	};
	
	enum TextColor
	{
		TC_DEFAULT,
		TC_COMMENT,
		TC_TEX,
		TC_ETEX,
		TC_KEYWORD0,
		TC_KEYWORD1,
		TC_KEYWORD2,
		TC_KEYWORD3,
		TC_KEYWORD4,
		TC_KEYWORD5,
		TC_KEYWORD6,
		TC_KEYWORD7,
		TC_KEYWORD8,
		TC_OPERATOR,
		TC_NUMBER
	};

	//enum enum_EM_EN_DASH_BEGIN  {EM_EN_DASH_BEGIN =0xe2-256 }; // signed 0xe2
	//enum enum_EM_EN_DASH_MIDDLE {EM_EN_DASH_MIDDLE=0x80-256 }; // signed 0x80
	//enum enum_EM_EN_DASH_END    {EN_DASH_END=0x093-256,
	//	                         EM_DASH_END=0x094-256}; 

	enum E_PUNCTUATION_001 { PUNCTUATION_001=0xc2-256 };
	const std::set<char> SET_PUNCTUATION_001 = { 0xa0 - 256, 0xa1 - 256,0xa2 - 256, 0xa3 - 256,0xa4 - 256, 0xa5 - 256,0xa6 - 256, 0xa7 - 256,
		0xa8 - 256, 0xa9 - 256, 0xaa - 256, 0xab - 256, 0xac - 256, 0xad - 256, 0xae - 256, 0xaf - 256,
		0xb0 - 256, /*0xb1 - 256,*/ 0xb2 - 256, 0xb3 - 256,0xb4 - 256, 0xb5 - 256,0xb6 - 256, 0xb7 - 256,
		0xb8 - 256, 0xb9 - 256, 0xba - 256, 0xbb - 256, 0xbc - 256, 0xbd - 256, 0xbe - 256, 0xbf - 256 };
	
	enum E_PUNCTUATION_002_BEGIN  { PUNCTUATION_002_BEGIN  = 0xe2 - 256 };
	enum E_PUNCTUATION_002_MIDDLE {
		PUNCTUATION_002_MIDDLE_01 = 0x80 - 256,
		PUNCTUATION_002_MIDDLE_02 = 0x81 - 256,
		PUNCTUATION_002_MIDDLE_03 = 0x82 - 256,
		PUNCTUATION_002_MIDDLE_04 = 0x83 - 256
	};
	const std::set<char> SET_PUNCTUATION_002 = { 0x80 - 256, 0x81 - 256, 0x82 - 256, 0x83 - 256,
		0x84 - 256, 0x85 - 256, 0x86 - 256, 0x87 - 256, 0x88 - 256, 0x89 - 256,
		0x8a - 256, 0x8b - 256, 0x8c - 256, 0x8d - 256, 0x8e - 256, 0x8f - 256, 0x90 - 256,
		0x91 - 256, 0x92 - 256, 0x93 - 256, 0x94 - 256, 0x95 - 256, 0x96 - 256,
		0x97 - 256, 0x98 - 256, 0x99 - 256, 0x9a - 256, 0x9b - 256, 0x9c - 256,
		0x9d - 256, 0x9e - 256, 0x9f - 256, 0xa0 - 256, 0xa1 - 256, 0xa2 - 256,
		0xa3 - 256, 0xa4 - 256, 0xa5 - 256, 0xa6 - 256, 0xa7 - 256, 0xa8 - 256,
		0xa9 - 256, 0xaa - 256, 0xab - 256, 0xac - 256, 0xad - 256, 0xae - 256,
		0xaf - 256, 0xb0 - 256, 0xb1 - 256, 0xb2 - 256, 0xb3 - 256, 0xb4 - 256,
		0xb5 - 256, 0xb6 - 256, 0xb7 - 256, 0xb8 - 256, 0xb9 - 256, 0xba - 256,
		0xbb - 256, 0xbc - 256, 0xbd - 256, 0xbe - 256, 0xbf - 256, 0xc0 - 256,
		0xc1 - 256, 0xc2 - 256, 0xc3 - 256, 0xc4 - 256, 0xc5 - 256, 0xc6 - 256,
		0xc7 - 256, 0xc8 - 256, 0xc9 - 256, 0xca - 256, 0xcb - 256, 0xcc - 256,
		0xcd - 256, 0xce - 256, 0xcf - 256, 0xd0 - 256, 0xd1 - 256, 0xd2 - 256,
		0xd3 - 256, 0xd4 - 256, 0xd5 - 256, 0xd6 - 256, 0xd7 - 256, 0xd8 - 256,
		0xd9 - 256, 0xda - 256, 0xdb - 256, 0xdc - 256, 0xdd - 256, 0xde - 256,
		0xdf - 256, 0xe0 - 256, 0xe1 - 256, 0xe2 - 256, 0xe3 - 256, 0xe4 - 256,
		0xe5 - 256, 0xe6 - 256, 0xe7 - 256, 0xe8 - 256, 0xe9 - 256, 0xea - 256,
		0xeb - 256, 0xec - 256, 0xed - 256, 0xee - 256, 0xef - 256, 0xf0 - 256,
		0xf1 - 256, 0xf2 - 256, 0xf3 - 256, 0xf4 - 256, 0xf5 - 256, 0xf6 - 256,
		0xf7 - 256, 0xf8 - 256, 0xf9 - 256, 0xfa - 256, 0xfb - 256, 0xfc - 256,
		0xfd - 256, 0xfe - 256, 0xff - 256 };
			
	//http://www.utf8-chartable.de/unicode-utf8-table.pl
	const std::set<unsigned int> SET_PUNCTUATION_002_EXCLUDED = {
		0xe28080,0xe28081,0xe28082,0xe28083,0xe28084,0xe28085,0xe28086,0xe28087,0xe28088,0xe28089,0xe2808a,0xe2808b,0xe2808c,0xe2808d,0xe2808e,0xe2808f,
		//
		0xe280a8,0xe280a9,0xe280aa,0xe280ab,0xe280ac,0xe280ad,0xe280ae,0xe280af,
		//
		0xe2819f,0xe281a0,0xe281a1,0xe281a2,0xe281a3,0xe281a4,0xe281a5,0xe281a6,0xe281a7,0xe281a8,0xe281a9,0xe281aa,0xe281ab,0xe281ac,0xe281ad,0xe281ae,0xe281af,
		//
		0xe2b1b2,0xe2b1b3,
		//
		0xe2828f,0xe2829d,0xe2829e,0xe2829f,
		//
		0xe282bf,0xe28380,0xe28381,0xe28382,0xe28383,0xe28384,0xe28385,0xe28386,0xe28387,0xe28388,0xe2838a,0xe2838b,0xe2838c,0xe2838d,0xe2838e,0xe2838f,
		0xe28390,0xe28391,0xe28392,0xe28393,0xe28394,0xe28395,0xe28396,0xe28397,0xe28398,0xe2839a,0xe2839b,0xe2839c,0xe2839d,0xe2839e,0xe2839f,
		0xe283a0,0xe283a1,0xe283a2,0xe283a3,0xe283a4,0xe283a5,0xe283a6,0xe283a7,0xe283a8,0xe283aa,0xe283ab,0xe283ac,0xe283ad,0xe283ae,0xe283af,
		0xe283b0,0xe283b1,0xe283b2,0xe283b3,0xe283b4,0xe283b5,0xe283b6,0xe283b7,0xe283b8,0xe283ba,0xe283bb,0xe283bc,0xe283bd,0xe283be,0xe283bf
	};


	//http://www.unicode.org/reports/tr44/
	enum E_Sm_PLUS_MINUS_SIGN { Sm_PLUS_MINUS_SIGN = 0xc2 - 256 };
	const std::set<char> SET_Sm_PLUS_MINUS_SIGN = { 0xb1 - 256 };

	enum E_ARABIC_INDIC_DIGIT_START { ARABIC_INDIC_DIGIT_START = 0xd9-256 }; //signed 0xd9, -39
	//enum ARABIC_INDIC_DIGIT
	//{
	//	ARABIC_INDIC_DIGIT_ZERO= 0xa0,	//[٠]   d9 a0
	//	ARABIC_INDIC_DIGIT_ONE, 		//[١]   d9 a1
	//	ARABIC_INDIC_DIGIT_TWO, 		//[٢]   d9 a2
	//	ARABIC_INDIC_DIGIT_THREE, 		//[٣]   d9 a3
	//	ARABIC_INDIC_DIGIT_FOUR, 		//[٤]   d9 a4
	//	ARABIC_INDIC_DIGIT_FIVE, 		//[٥]   d9 a5
	//	ARABIC_INDIC_DIGIT_SIX, 		//[٦]   d9 a6
	//	ARABIC_INDIC_DIGIT_SEVEN, 		//[٧]   d9 a7
	//	ARABIC_INDIC_DIGIT_EIGHT, 		//[٨]   d9 a8
	//	ARABIC_INDIC_DIGIT_NINE			//[٩]   d9 a9
	//};

	enum E_EXTENDED_ARABIC_INDIC_DIGIT_START { EXTENDED_ARABIC_INDIC_DIGIT_START = 0xdb-256 }; // signed 0xdb, -37
	//enum EXTENDED_ARABIC_INDIC_DIGIT
	//{
	//	EXTENDED_ARABIC_INDIC_DIGIT_ZERO = 0xb0,	//[۰]   db b0 
	//	EXTENDED_ARABIC_INDIC_DIGIT_ONE, 		//[۱]   db b1 
	//	EXTENDED_ARABIC_INDIC_DIGIT_TWO, 		//[۲]   db b2 
	//	EXTENDED_ARABIC_INDIC_DIGIT_THREE, 		//[۳]   db b3 
	//	EXTENDED_ARABIC_INDIC_DIGIT_FOUR, 		//[۴]   db b4 
	//	EXTENDED_ARABIC_INDIC_DIGIT_FIVE, 		//[۵]   db b5 
	//	EXTENDED_ARABIC_INDIC_DIGIT_SIX, 		//[۶]   db b6 
	//	EXTENDED_ARABIC_INDIC_DIGIT_SEVEN, 		//[۷]   db b7 
	//	EXTENDED_ARABIC_INDIC_DIGIT_EIGHT, 		//[۸]   db b8 
	//	EXTENDED_ARABIC_INDIC_DIGIT_NINE		//[۹]   db b9 
	//};
	const std::set<char> SET_ARABIC_INDIC_DIGIT = { 0xa0 - 256,0xa1 - 256,0xa2 - 256,
		0xa3 - 256,0xa4 - 256,0xa5 - 256,0xa6 - 256, 0xa7 - 256, 0xa8 - 256, 0xa9 - 256 };

	const std::set<char> SET_EXTENDED_ARABIC_INDIC_DIGIT = { 0xb0 - 256,0xb1 - 256,0xb2 - 256,
		0xb3 - 256,0xb4 - 256,0xb5 - 256,0xb6 - 256, 0xb7 - 256, 0xb8 - 256, 0xb9 - 256};

	WordList m_WordLists[22];
	/*const std::set<std::string> OPERATORS = { "'", "-", "!", "\"","#", "$","&", "(",")","*", ",",
		".", "/", ":", ";", "?", "@", "[" ,"]", "^", "_", "`", "{", "|" ,"}", "~", "+", "<", ">", "—", "–", "=" };
	const std::set<std::string> NUMBERS = { "0","1","2","3","4", "5", "6", "7", "8", "9" };
	*/	
	const std::set<std::string> OPERATORS = { "'", "-", "!", "\"","#", "$","&", "(",")", ",",
	".",  ":", ";", "?", "@", "[" ,"]", "^", "_", "`", "{", "|" ,"}", "~",  "<", ">", "—",  "=" };
	const std::set<std::string> NUMBERS = { "0","1","2","3","4", "5", "6", "7", "8", "9","*","+","/","-" };
	


	const std::set<std::string> TeX_Macros = {
		"\\ ",
		"\\-",
		"\\/",
		"\\Uleft",
		"\\Umiddle",
		"\\Uright",
		"\\above",
		"\\abovedisplayshortskip",
		"\\abovedisplayskip",
		"\\abovewithdelims",
		"\\accent",
		"\\adjdemerits",
		"\\advance",
		"\\afterassignment",
		"\\aftergroup",
		"\\atop",
		"\\atopwithdelims",
		"\\badness",
		"\\baselineskip",
		"\\batchmode",
		"\\begingroup",
		"\\belowdisplayshortskip",
		"\\belowdisplayskip",
		"\\binoppenalty",
		"\\botmark",
		"\\boundary",
		"\\box",
		"\\boxmaxdepth",
		"\\brokenpenalty",
		"\\catcode",
		"\\char",
		"\\chardef",
		"\\cleaders",
		"\\closein",
		"\\closeout",
		"\\clubpenalty",
		"\\copy",
		"\\count",
		"\\countdef",
		"\\cr",
		"\\crcr",
		"\\csname",
		"\\csstring",
		"\\day",
		"\\deadcycles",
		"\\def",
		"\\defaulthyphenchar",
		"\\defaultskewchar",
		"\\delcode",
		"\\delimiter",
		"\\delimiterfactor",
		"\\delimitershortfall",
		"\\dimen",
		"\\dimendef",
		"\\directlua",
		"\\discretionary",
		"\\displayindent",
		"\\displaylimits",
		"\\displaystyle",
		"\\displaywidowpenalty",
		"\\displaywidth",
		"\\divide",
		"\\doublehyphendemerits",
		"\\dp",
		"\\dump",
		"\\edef",
		"\\else",
		"\\emergencystretch",
		"\\end",
		"\\endcsname",
		"\\endgroup",
		"\\endinput",
		"\\endlinechar",
		"\\eqno",
		"\\errhelp",
		"\\errmessage",
		"\\errorcontextlines",
		"\\errorstopmode",
		"\\escapechar",
		"\\everycr",
		"\\everydisplay",
		"\\everyhbox",
		"\\everyjob",
		"\\everymath",
		"\\everypar",
		"\\everyvbox",
		"\\exhyphenchar",
		"\\exhyphenpenalty",
		"\\expandafter",
		"\\fam",
		"\\fi",
		"\\finalhyphendemerits",
		"\\firstmark",
		"\\firstvalidlanguage",
		"\\floatingpenalty",
		"\\font",
		"\\fontdimen",
		"\\fontname",
		"\\futurelet",
		"\\gdef",
		"\\global",
		"\\globaldefs",
		"\\halign",
		"\\hangafter",
		"\\hangindent",
		"\\hbadness",
		"\\hbox",
		"\\hfil",
		"\\hfill",
		"\\hfilneg",
		"\\hfuzz",
		"\\hoffset",
		"\\holdinginserts",
		"\\hpack",
		"\\hrule",
		"\\hsize",
		"\\hskip",
		"\\hss",
		"\\ht",
		"\\hyphenation",
		"\\hyphenchar",
		"\\hyphenpenalty",
		"\\if",
		"\\ifcase",
		"\\ifcat",
		"\\ifdim",
		"\\ifeof",
		"\\iffalse",
		"\\ifhbox",
		"\\ifhmode",
		"\\ifinner",
		"\\ifmmode",
		"\\ifnum",
		"\\ifodd",
		"\\iftrue",
		"\\ifvbox",
		"\\ifvmode",
		"\\ifvoid",
		"\\ifx",
		"\\ignorespaces",
		"\\immediate",
		"\\indent",
		"\\input",
		"\\inputlineno",
		"\\insert",
		"\\insertpenalties",
		"\\interlinepenalty",
		"\\jobname",
		"\\kern",
		"\\language",
		"\\lastbox",
		"\\lastkern",
		"\\lastpenalty",
		"\\lastskip",
		"\\lccode",
		"\\leaders",
		"\\left",
		"\\lefthyphenmin",
		"\\leftskip",
		"\\leqno",
		"\\let",
		"\\limits",
		"\\linepenalty",
		"\\lineskip",
		"\\lineskiplimit",
		"\\long",
		"\\looseness",
		"\\lower",
		"\\lowercase",
		"\\mag",
		"\\mark",
		"\\mathaccent",
		"\\mathbin",
		"\\mathchar",
		"\\mathchardef",
		"\\mathchoice",
		"\\mathclose",
		"\\mathcode",
		"\\mathinner",
		"\\mathop",
		"\\mathopen",
		"\\mathord",
		"\\mathpunct",
		"\\mathrel",
		"\\mathsurround",
		"\\maxdeadcycles",
		"\\maxdepth",
		"\\meaning",
		"\\medmuskip",
		"\\message",
		"\\middle",
		"\\mkern",
		"\\month",
		"\\moveleft",
		"\\moveright",
		"\\mskip",
		"\\multiply",
		"\\muskip",
		"\\muskipdef",
		"\\newlinechar",
		"\\noalign",
		"\\noboundary",
		"\\noexpand",
		"\\noindent",
		"\\nolimits",
		"\\nonscript",
		"\\nonstopmode",
		"\\nulldelimiterspace",
		"\\nullfont",
		"\\number",
		"\\omit",
		"\\openin",
		"\\openout",
		"\\or",
		"\\outer",
		"\\output",
		"\\outputpenalty",
		"\\over",
		"\\overfullrule",
		"\\overline",
		"\\overwithdelims",
		"\\pagedepth",
		"\\pagefilllstretch",
		"\\pagefillstretch",
		"\\pagefilstretch",
		"\\pagegoal",
		"\\pageshrink",
		"\\pagestretch",
		"\\pagetotal",
		"\\par",
		"\\parfillskip",
		"\\parindent",
		"\\parshape",
		"\\parskip",
		"\\patterns",
		"\\pausing",
		"\\penalty",
		"\\postdisplaypenalty",
		"\\predisplaypenalty",
		"\\predisplaysize",
		"\\pretolerance",
		"\\prevdepth",
		"\\prevgraf",
		"\\protrusionboundary",
		"\\radical",
		"\\raise",
		"\\read",
		"\\relax",
		"\\relpenalty",
		"\\right",
		"\\righthyphenmin",
		"\\rightskip",
		"\\romannumeral",
		"\\scriptfont",
		"\\scriptscriptfont",
		"\\scriptscriptstyle",
		"\\scriptspace",
		"\\scriptstyle",
		"\\scrollmode",
		"\\setbox",
		"\\setlanguage",
		"\\sfcode",
		"\\shipout",
		"\\show",
		"\\showbox",
		"\\showboxbreadth",
		"\\showboxdepth",
		"\\showlists",
		"\\showthe",
		"\\skewchar",
		"\\skip",
		"\\skipdef",
		"\\spacefactor",
		"\\spaceskip",
		"\\span",
		"\\special",
		"\\splitbotmark",
		"\\splitfirstmark",
		"\\splitmaxdepth",
		"\\splittopskip",
		"\\string",
		"\\tabskip",
		"\\textfont",
		"\\textstyle",
		"\\the",
		"\\thickmuskip",
		"\\thinmuskip",
		"\\time",
		"\\toks",
		"\\toksdef",
		"\\tolerance",
		"\\topmark",
		"\\topskip",
		"\\tpack",
		"\\tracingcommands",
		"\\tracinglostchars",
		"\\tracingmacros",
		"\\tracingonline",
		"\\tracingoutput",
		"\\tracingpages",
		"\\tracingparagraphs",
		"\\tracingrestores",
		"\\tracingstats",
		"\\uccode",
		"\\uchyph",
		"\\underline",
		"\\unhbox",
		"\\unhcopy",
		"\\unkern",
		"\\unpenalty",
		"\\unskip",
		"\\unvbox",
		"\\unvcopy",
		"\\uppercase",
		"\\vadjust",
		"\\valign",
		"\\vbadness",
		"\\vbox",
		"\\vcenter",
		"\\vfil",
		"\\vfill",
		"\\vfilneg",
		"\\vfuzz",
		"\\voffset",
		"\\vpack",
		"\\vrule",
		"\\vsize",
		"\\vskip",
		"\\vsplit",
		"\\vss",
		"\\vtop",
		"\\wd",
		"\\widowpenalty",
		"\\wordboundary",
		"\\write",
		"\\xdef",
		"\\xleaders",
		"\\xspaceskip",
		"\\year"
	};

	const std::set<std::string> eTeX_Macros = {
		"\\botmarks",
		"\\clubpenalties",
		"\\currentgrouplevel",
		"\\currentgrouptype",
		"\\currentifbranch",
		"\\currentiflevel",
		"\\currentiftype",
		"\\detokenize",
		"\\dimexpr",
		"\\displaywidowpenalties",
		"\\eTeXVersion",
		"\\eTeXminorversion",
		"\\eTeXrevision",
		"\\eTeXversion",
		"\\everyeof",
		"\\firstmarks",
		"\\fontchardp",
		"\\fontcharht",
		"\\fontcharic",
		"\\fontcharwd",
		"\\glueexpr",
		"\\glueshrink",
		"\\glueshrinkorder",
		"\\gluestretch",
		"\\gluestretchorder",
		"\\gluetomu",
		"\\ifcsname",
		"\\ifdefined",
		"\\iffontchar",
		"\\interactionmode",
		"\\interlinepenalties",
		"\\lastlinefit",
		"\\lastnodetype",
		"\\marks",
		"\\muexpr",
		"\\mutoglue",
		"\\numexpr",
		"\\pagediscards",
		"\\parshapedimen",
		"\\parshapeindent",
		"\\parshapelength",
		"\\predisplaydirection",
		"\\protected",
		"\\readline",
		"\\savinghyphcodes",
		"\\savingvdiscards",
		"\\scantokens",
		"\\showgroups",
		"\\showifs",
		"\\showtokens",
		"\\splitbotmarks",
		"\\splitdiscards",
		"\\splitfirstmarks",
		"\\topmarks",
		"\\tracingassigns",
		"\\tracinggroups",
		"\\tracingifs",
		"\\tracingnesting",
		"\\tracingscantokens",
		"\\unexpanded",
		"\\unless",
		"\\widowpenalties"
	};

	/*const std::set<std::string> TeX_eTeX_Macros = {
		"\\ ",
		"\\-",
		"\\/",
		"\\Uleft",
		"\\Umiddle",
		"\\Uright",
		"\\above",
		"\\abovedisplayshortskip",
		"\\abovedisplayskip",
		"\\abovewithdelims",
		"\\accent",
		"\\adjdemerits",
		"\\advance",
		"\\afterassignment",
		"\\aftergroup",
		"\\atop",
		"\\atopwithdelims",
		"\\badness",
		"\\baselineskip",
		"\\batchmode",
		"\\begingroup",
		"\\belowdisplayshortskip",
		"\\belowdisplayskip",
		"\\binoppenalty",
		"\\botmark",
		"\\botmarks",
		"\\boundary",
		"\\box",
		"\\boxmaxdepth",
		"\\brokenpenalty",
		"\\catcode",
		"\\char",
		"\\chardef",
		"\\cleaders",
		"\\closein",
		"\\closeout",
		"\\clubpenalties",
		"\\clubpenalty",
		"\\copy",
		"\\count",
		"\\countdef",
		"\\cr",
		"\\crcr",
		"\\csname",
		"\\csstring",
		"\\currentgrouplevel",
		"\\currentgrouptype",
		"\\currentifbranch",
		"\\currentiflevel",
		"\\currentiftype",
		"\\day",
		"\\deadcycles",
		"\\def",
		"\\defaulthyphenchar",
		"\\defaultskewchar",
		"\\delcode",
		"\\delimiter",
		"\\delimiterfactor",
		"\\delimitershortfall",
		"\\detokenize",
		"\\dimen",
		"\\dimendef",
		"\\dimexpr",
		"\\directlua",
		"\\discretionary",
		"\\displayindent",
		"\\displaylimits",
		"\\displaystyle",
		"\\displaywidowpenalties",
		"\\displaywidowpenalty",
		"\\displaywidth",
		"\\divide",
		"\\doublehyphendemerits",
		"\\dp",
		"\\dump",
		"\\eTeXVersion",
		"\\eTeXminorversion",
		"\\eTeXrevision",
		"\\eTeXversion",
		"\\edef",
		"\\else",
		"\\emergencystretch",
		"\\end",
		"\\endcsname",
		"\\endgroup",
		"\\endinput",
		"\\endlinechar",
		"\\eqno",
		"\\errhelp",
		"\\errmessage",
		"\\errorcontextlines",
		"\\errorstopmode",
		"\\escapechar",
		"\\everycr",
		"\\everydisplay",
		"\\everyeof",
		"\\everyhbox",
		"\\everyjob",
		"\\everymath",
		"\\everypar",
		"\\everyvbox",
		"\\exhyphenchar",
		"\\exhyphenpenalty",
		"\\expandafter",
		"\\fam",
		"\\fi",
		"\\finalhyphendemerits",
		"\\firstmark",
		"\\firstmarks",
		"\\firstvalidlanguage",
		"\\floatingpenalty",
		"\\font",
		"\\fontchardp",
		"\\fontcharht",
		"\\fontcharic",
		"\\fontcharwd",
		"\\fontdimen",
		"\\fontname",
		"\\futurelet",
		"\\gdef",
		"\\global",
		"\\globaldefs",
		"\\glueexpr",
		"\\glueshrink",
		"\\glueshrinkorder",
		"\\gluestretch",
		"\\gluestretchorder",
		"\\gluetomu",
		"\\halign",
		"\\hangafter",
		"\\hangindent",
		"\\hbadness",
		"\\hbox",
		"\\hfil",
		"\\hfill",
		"\\hfilneg",
		"\\hfuzz",
		"\\hoffset",
		"\\holdinginserts",
		"\\hpack",
		"\\hrule",
		"\\hsize",
		"\\hskip",
		"\\hss",
		"\\ht",
		"\\hyphenation",
		"\\hyphenchar",
		"\\hyphenpenalty",
		"\\if",
		"\\ifcase",
		"\\ifcat",
		"\\ifcsname",
		"\\ifdefined",
		"\\ifdim",
		"\\ifeof",
		"\\iffalse",
		"\\iffontchar",
		"\\ifhbox",
		"\\ifhmode",
		"\\ifinner",
		"\\ifmmode",
		"\\ifnum",
		"\\ifodd",
		"\\iftrue",
		"\\ifvbox",
		"\\ifvmode",
		"\\ifvoid",
		"\\ifx",
		"\\ignorespaces",
		"\\immediate",
		"\\indent",
		"\\input",
		"\\inputlineno",
		"\\insert",
		"\\insertpenalties",
		"\\interactionmode",
		"\\interlinepenalties",
		"\\interlinepenalty",
		"\\jobname",
		"\\kern",
		"\\language",
		"\\lastbox",
		"\\lastkern",
		"\\lastlinefit",
		"\\lastnodetype",
		"\\lastpenalty",
		"\\lastskip",
		"\\lccode",
		"\\leaders",
		"\\left",
		"\\lefthyphenmin",
		"\\leftskip",
		"\\leqno",
		"\\let",
		"\\limits",
		"\\linepenalty",
		"\\lineskip",
		"\\lineskiplimit",
		"\\long",
		"\\looseness",
		"\\lower",
		"\\lowercase",
		"\\mag",
		"\\mark",
		"\\marks",
		"\\mathaccent",
		"\\mathbin",
		"\\mathchar",
		"\\mathchardef",
		"\\mathchoice",
		"\\mathclose",
		"\\mathcode",
		"\\mathinner",
		"\\mathop",
		"\\mathopen",
		"\\mathord",
		"\\mathpunct",
		"\\mathrel",
		"\\mathsurround",
		"\\maxdeadcycles",
		"\\maxdepth",
		"\\meaning",
		"\\medmuskip",
		"\\message",
		"\\middle",
		"\\mkern",
		"\\month",
		"\\moveleft",
		"\\moveright",
		"\\mskip",
		"\\muexpr",
		"\\multiply",
		"\\muskip",
		"\\muskipdef",
		"\\mutoglue",
		"\\newlinechar",
		"\\noalign",
		"\\noboundary",
		"\\noexpand",
		"\\noindent",
		"\\nolimits",
		"\\nonscript",
		"\\nonstopmode",
		"\\nulldelimiterspace",
		"\\nullfont",
		"\\number",
		"\\numexpr",
		"\\omit",
		"\\openin",
		"\\openout",
		"\\or",
		"\\outer",
		"\\output",
		"\\outputpenalty",
		"\\over",
		"\\overfullrule",
		"\\overline",
		"\\overwithdelims",
		"\\pagedepth",
		"\\pagediscards",
		"\\pagefilllstretch",
		"\\pagefillstretch",
		"\\pagefilstretch",
		"\\pagegoal",
		"\\pageshrink",
		"\\pagestretch",
		"\\pagetotal",
		"\\par",
		"\\parfillskip",
		"\\parindent",
		"\\parshape",
		"\\parshapedimen",
		"\\parshapeindent",
		"\\parshapelength",
		"\\parskip",
		"\\patterns",
		"\\pausing",
		"\\penalty",
		"\\postdisplaypenalty",
		"\\predisplaydirection",
		"\\predisplaypenalty",
		"\\predisplaysize",
		"\\pretolerance",
		"\\prevdepth",
		"\\prevgraf",
		"\\protected",
		"\\protrusionboundary",
		"\\radical",
		"\\raise",
		"\\read",
		"\\readline",
		"\\relax",
		"\\relpenalty",
		"\\right",
		"\\righthyphenmin",
		"\\rightskip",
		"\\romannumeral",
		"\\savinghyphcodes",
		"\\savingvdiscards",
		"\\scantokens",
		"\\scriptfont",
		"\\scriptscriptfont",
		"\\scriptscriptstyle",
		"\\scriptspace",
		"\\scriptstyle",
		"\\scrollmode",
		"\\setbox",
		"\\setlanguage",
		"\\sfcode",
		"\\shipout",
		"\\show",
		"\\showbox",
		"\\showboxbreadth",
		"\\showboxdepth",
		"\\showgroups",
		"\\showifs",
		"\\showlists",
		"\\showthe",
		"\\showtokens",
		"\\skewchar",
		"\\skip",
		"\\skipdef",
		"\\spacefactor",
		"\\spaceskip",
		"\\span",
		"\\special",
		"\\splitbotmark",
		"\\splitbotmarks",
		"\\splitdiscards",
		"\\splitfirstmark",
		"\\splitfirstmarks",
		"\\splitmaxdepth",
		"\\splittopskip",
		"\\string",
		"\\tabskip",
		"\\textfont",
		"\\textstyle",
		"\\the",
		"\\thickmuskip",
		"\\thinmuskip",
		"\\time",
		"\\toks",
		"\\toksdef",
		"\\tolerance",
		"\\topmark",
		"\\topmarks",
		"\\topskip",
		"\\tpack",
		"\\tracingassigns",
		"\\tracingcommands",
		"\\tracinggroups",
		"\\tracingifs",
		"\\tracinglostchars",
		"\\tracingmacros",
		"\\tracingnesting",
		"\\tracingonline",
		"\\tracingoutput",
		"\\tracingpages",
		"\\tracingparagraphs",
		"\\tracingrestores",
		"\\tracingscantokens",
		"\\tracingstats",
		"\\uccode",
		"\\uchyph",
		"\\underline",
		"\\unexpanded",
		"\\unhbox",
		"\\unhcopy",
		"\\unkern",
		"\\unless",
		"\\unpenalty",
		"\\unskip",
		"\\unvbox",
		"\\unvcopy",
		"\\uppercase",
		"\\vadjust",
		"\\valign",
		"\\vbadness",
		"\\vbox",
		"\\vcenter",
		"\\vfil",
		"\\vfill",
		"\\vfilneg",
		"\\vfuzz",
		"\\voffset",
		"\\vpack",
		"\\vrule",
		"\\vsize",
		"\\vskip",
		"\\vsplit",
		"\\vss",
		"\\vtop",
		"\\wd",
		"\\widowpenalties",
		"\\widowpenalty",
		"\\wordboundary",
		"\\write",
		"\\xdef",
		"\\xleaders",
		"\\xspaceskip",
		"\\year" };
*/

};

}	// namespace ConTeXt

#endif
